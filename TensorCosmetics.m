(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["TensorCosmetics`"];
Unprotect@@Names["TensorCosmetics`*"];
ClearAll@@Names["TensorCosmetics`*"];

GenInd::usage=
"GenInd[x_] is a GSH index generator that returns the index or a sequence of concatenated indices corresponding to the arguments x = 1 or 2 or 3 or a list of these numbers, for 3D geometry.";
GenerateTensor::usage=
"GenerateTensor[x_] is a tensor index generator that returns the elements of tensor x in tensorial form subscripted by -,0 or + depending upon its location in the tensor";
UnitTensor::usage = 
"UnitTensor[A_] returns tensor with 1 in slot A and 0 everywhere else. Rank = Length[A]. Dim = 3.\[IndentingNewLine]Rank = 1 if Length[A] = 0 i.e. A is an integer";
Symmetrise::usage=
"Symmetrise[h_] symmetrises a given second order tensor.";

Begin["`Private`"];

GenInd[i_]:=Module[{},
If[Length[i]==0,Switch[i,1,"-",2,"0",3,"+"],
Module[{k,temp},
temp="";
For[k=1,k<=Length[i],k++,temp=temp<>GenInd[i[[k]]]];
Return[temp];
]
]
]

GenerateTensor[T_]:=
Module[{i,j},Return[Table[Subscript[Symbol[T], GenInd[{i,j}]],{i,1,3},{j,1,3}]]];

UnitTensor[A_]:=Module[{ret,i},
(
If[Max[A]>3||Max[A]<0,Return[0]];
If[Length[A]==0,ret=Array[KroneckerDelta[#,A]&,3],
(
ret=1;
For[i=1,i<=Length[A],i++,
ret=TensorProduct[ret,UnitTensor[A[[i]]]];
];
)
];
Return[ret];
)
]

Symmetrise[h_]:=Module[{i,j},
ret=Evaluate[h];
For[i=1,i<=3,i++,
For[j=i+1,j<=3,j++,
ret[[i]][[j]]=h[[j]][[i]];
];
];
Return[ret];
];

End[];
Protect@@Names["TensorCosmetics`*"];
EndPackage[];



